// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package api

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*simulateTransactionResultMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SimulateTransactionResult) MarshalJSON() ([]byte, error) {
	type SimulateTransactionResult struct {
		Egp     hexutil.Uint64  `json:"egp"`
		Logs    []*SimulatedLog `json:"logs"`
		Success bool            `json:"success"`
		Error   string          `json:"error"`
	}
	var enc SimulateTransactionResult
	enc.Egp = hexutil.Uint64(s.Egp)
	enc.Logs = s.Logs
	enc.Success = s.Success
	enc.Error = s.Error
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SimulateTransactionResult) UnmarshalJSON(input []byte) error {
	type SimulateTransactionResult struct {
		Egp     *hexutil.Uint64 `json:"egp"`
		Logs    []*SimulatedLog `json:"logs"`
		Success *bool           `json:"success"`
		Error   *string         `json:"error"`
	}
	var dec SimulateTransactionResult
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Egp != nil {
		s.Egp = uint64(*dec.Egp)
	}
	if dec.Logs != nil {
		s.Logs = dec.Logs
	}
	if dec.Success != nil {
		s.Success = *dec.Success
	}
	if dec.Error != nil {
		s.Error = *dec.Error
	}
	return nil
}
