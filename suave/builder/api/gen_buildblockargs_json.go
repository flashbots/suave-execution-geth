// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package api

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*buildBlockArgsMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BuildBlockArgs) MarshalJSON() ([]byte, error) {
	type BuildBlockArgs struct {
		Slot           hexutil.Uint64      `json:"slot"`
		ProposerPubkey hexutil.Bytes       `json:"proposerPubkey"`
		Parent         common.Hash         `json:"parent"`
		Timestamp      hexutil.Uint64      `json:"timestamp"`
		FeeRecipient   common.Address      `json:"feeRecipient"`
		GasLimit       hexutil.Uint64      `json:"gasLimit"`
		Random         common.Hash         `json:"random"`
		Withdrawals    []*types.Withdrawal `json:"withdrawals"`
		Extra          hexutil.Bytes       `json:"extra"`
	}
	var enc BuildBlockArgs
	enc.Slot = hexutil.Uint64(b.Slot)
	enc.ProposerPubkey = b.ProposerPubkey
	enc.Parent = b.Parent
	enc.Timestamp = hexutil.Uint64(b.Timestamp)
	enc.FeeRecipient = b.FeeRecipient
	enc.GasLimit = hexutil.Uint64(b.GasLimit)
	enc.Random = b.Random
	enc.Withdrawals = b.Withdrawals
	enc.Extra = b.Extra
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BuildBlockArgs) UnmarshalJSON(input []byte) error {
	type BuildBlockArgs struct {
		Slot           *hexutil.Uint64     `json:"slot"`
		ProposerPubkey *hexutil.Bytes      `json:"proposerPubkey"`
		Parent         *common.Hash        `json:"parent"`
		Timestamp      *hexutil.Uint64     `json:"timestamp"`
		FeeRecipient   *common.Address     `json:"feeRecipient"`
		GasLimit       *hexutil.Uint64     `json:"gasLimit"`
		Random         *common.Hash        `json:"random"`
		Withdrawals    []*types.Withdrawal `json:"withdrawals"`
		Extra          *hexutil.Bytes      `json:"extra"`
	}
	var dec BuildBlockArgs
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Slot != nil {
		b.Slot = uint64(*dec.Slot)
	}
	if dec.ProposerPubkey != nil {
		b.ProposerPubkey = *dec.ProposerPubkey
	}
	if dec.Parent != nil {
		b.Parent = *dec.Parent
	}
	if dec.Timestamp != nil {
		b.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.FeeRecipient != nil {
		b.FeeRecipient = *dec.FeeRecipient
	}
	if dec.GasLimit != nil {
		b.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.Random != nil {
		b.Random = *dec.Random
	}
	if dec.Withdrawals != nil {
		b.Withdrawals = dec.Withdrawals
	}
	if dec.Extra != nil {
		b.Extra = *dec.Extra
	}
	return nil
}
